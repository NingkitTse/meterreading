package com.wasion.meterreading.task;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Optional;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.atomic.AtomicInteger;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.http.HttpResponse;
import org.json.JSONArray;
import org.json.JSONException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.data.domain.PageRequest;
import org.springframework.http.HttpStatus;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.wasion.meterreading.config.OnenetProperties;
import com.wasion.meterreading.constant.EcasConstant;
import com.wasion.meterreading.constant.SystemConstant;
import com.wasion.meterreading.entity.RtTaskOnlineV1910;
import com.wasion.meterreading.entity.TCfgAppsConfig;
import com.wasion.meterreading.entity.TCfgProtocolCmd;
import com.wasion.meterreading.entity.TCfgProtocolCmdParam;
import com.wasion.meterreading.entity.TRunMeter;
import com.wasion.meterreading.entity.TRunMeterDocu;
import com.wasion.meterreading.entity.TRunMeterDocuId;
import com.wasion.meterreading.exception.MRException;
import com.wasion.meterreading.exception.MRExceptionEnum;
import com.wasion.meterreading.orm.jpa.RtTaskOnlineV1910Repository;
import com.wasion.meterreading.orm.jpa.TCfgProtocolCmdParamRepository;
import com.wasion.meterreading.orm.jpa.TCfgProtocolCmdRepository;
import com.wasion.meterreading.orm.jpa.TRunMeterDocuRepository;
import com.wasion.meterreading.orm.jpa.TRunMeterRepository;
import com.wasion.meterreading.service.impl.cache.AppConfigCacheService;
import com.wasion.meterreading.util.CommonUtil;
import com.wasion.meterreading.util.ParseUtil;

import cmcciot.onenet.nbapi.sdk.api.online.ExecuteOpe;
import cmcciot.onenet.nbapi.sdk.entity.WriteOfflineV1910;
import telecom.sdk.service.commandDelivery.CreateDeviceCommand;
import telecom.sdk.utils.HttpsUtil;

/**
 * 【水表命令执行】任务
 * 
 * @author w24882
 * @date 2019年11月13日
 */
@ConditionalOnProperty(name = "task.iot.command.process.enable", havingValue = "true")
@EnableConfigurationProperties(value = OnenetProperties.class)
@Component
public class CommandProcessTask {

    private static final Logger LOG = LoggerFactory.getLogger(CommandProcessTask.class);
    /**
     * 未执行标识
     */
    private static final Integer STATE_NOT_EXECUTE = -1;
    /**
     * 成功标识
     */
    private static final Integer STATE_EXECUTE_SUCCESS = 1;
    /**
     * 失败标识
     */
    private static final Integer STATE_EXECUTE_FAILURE = 0;

    @Autowired
    private AppConfigCacheService cacheService;
    @Autowired
    private RtTaskOnlineV1910Repository taskRepo;
    @Autowired
    private TCfgProtocolCmdRepository cmdRepo; // 命令仓库
    @Autowired
    private TCfgProtocolCmdParamRepository cmdParamRepo; // 命令参数仓库
    @Autowired
    private TRunMeterDocuRepository docuRepo; // 表计拓展参数仓库
    @Autowired
    private TRunMeterRepository meterRepo;
    @Autowired
    private OnenetProperties properties;
    /**
     * 异步任务服务
     */
    private ExecutorService executor = Executors.newCachedThreadPool(new ThreadFactory() {
        private final AtomicInteger poolNumber = new AtomicInteger(1);

        @Override
        public Thread newThread(Runnable r) {
            return new Thread(r, "Command-Process-" + poolNumber.getAndIncrement() + "-Thread");
        }
    });
    private List<RtTaskOnlineV1910> tasks = new ArrayList<>();
    private List<RtTaskOnlineV1910> successCommands = new ArrayList<>();
    private List<RtTaskOnlineV1910> failCommands = new ArrayList<>();
    private Map<RtTaskOnlineV1910, Future<HttpResponse>> telecomFutureMap = new HashMap<>();
    private Map<RtTaskOnlineV1910, Future<org.json.JSONObject>> mobileFutureMap = new HashMap<>();

    @Scheduled(cron = "30 * * * * *")
    public void scheduled() {
        PageRequest page = PageRequest.of(0, 30);
        tasks = taskRepo.findBySuccessOrderByCommandPriority(STATE_NOT_EXECUTE, page);
        successCommands.clear();
        failCommands.clear();
        telecomFutureMap.clear();
        mobileFutureMap.clear();

        if (CollectionUtils.isEmpty(tasks)) {
            return;
        }
        submitCommand2IotPlatform();
        processTelecomSubmitResult();
        processMobileSubmitResult();
        taskRepo.saveAll(tasks);
        LOG.info("Success num-> {}, Failure num-> {}, Total num-> {}", successCommands.size(), failCommands.size(), tasks.size());
    }

    private void processMobileSubmitResult() {
        if (mobileFutureMap.isEmpty()) {
            return;
        }
        for (Entry<RtTaskOnlineV1910, Future<org.json.JSONObject>> entry : mobileFutureMap.entrySet()) {
            RtTaskOnlineV1910 command = entry.getKey();
            Integer maxExecuteTimes = command.getMaxExecuteTimes();
            Integer executedTimes = command.getExecutedTimes();
            Future<org.json.JSONObject> future = entry.getValue();
            try {
                org.json.JSONObject jsonObject = future.get();
                if (null == jsonObject) {
                    return;
                }
                int errno = jsonObject.getInt("errno");
                if (0 == errno) {
                    String wlwCommandId = jsonObject.getJSONObject("data").getString("uuid");
                    command.setCommandId(wlwCommandId);
                    command.setSuccess(STATE_EXECUTE_SUCCESS);
                    command.setWlwCmdStatus("PENDING");
                    successCommands.add(command);
                } else {
                    String error = jsonObject.getString("error");
                    LOG.warn("Publish command to mobile failed, command: {}, reason: {}", command, error);
                    String traceId = CommonUtil.getUuid();
                    if (executedTimes >= maxExecuteTimes) {
                        command.setSuccess(STATE_EXECUTE_FAILURE);
                        command.setRemark("下发命令失败, traceId:" + traceId);
                        command.setExceptionCode(500);
                    }
                    failCommands.add(command);
                }
            } catch (InterruptedException | ExecutionException | JSONException e) {
                LOG.error("Publish command to mobile failed, command: {}", command, e);
                String traceId = CommonUtil.getUuid();
                if (executedTimes >= maxExecuteTimes) {
                    command.setSuccess(STATE_EXECUTE_FAILURE);
                    command.setRemark("下发命令失败, traceId:" + traceId);
                    command.setExceptionCode(500);
                }
                failCommands.add(command);
            }
        }
    }

    private void processTelecomSubmitResult() {
        if (telecomFutureMap.isEmpty()) {
            return;
        }
        for (Entry<RtTaskOnlineV1910, Future<HttpResponse>> entry : telecomFutureMap.entrySet()) {
            RtTaskOnlineV1910 command = entry.getKey();
            Integer maxExecuteTimes = command.getMaxExecuteTimes();
            Integer executedTimes = command.getExecutedTimes();
            Future<HttpResponse> future = entry.getValue();
            try {
                if (null == future) { // 产生了异常时为空
                    return;
                }
                HttpResponse response = future.get();
                if (null == response) {
                    LOG.error("Publish command to platform failed, command: {}", command);
                    command.setSuccess(STATE_EXECUTE_FAILURE);
                    command.setExceptionCode(500);
                    failCommands.add(command);
                    continue;
                }
                final int statusCode = response.getStatusLine().getStatusCode();
                if (statusCode == HttpStatus.CREATED.value()) {
                    String responseBody = HttpsUtil.getInstance().getHttpResponseBody(response);
                    JSONObject rspObj = JSON.parseObject(responseBody);
                    String status = rspObj.getString("status");
                    String commandId = rspObj.getString("commandId");
                    command.setWlwCmdStatus(status);
                    command.setCommandId(commandId);
                    command.setSuccess(STATE_EXECUTE_SUCCESS);
                    successCommands.add(command);
                } else {
                    command.setSuccess(STATE_EXECUTE_FAILURE);
                    command.setExceptionCode(statusCode);
                    failCommands.add(command);
                }
            } catch (InterruptedException | ExecutionException | UnsupportedOperationException | IOException e1) {
                LOG.error("Publish command to platform failed, command: {}", command);
                String traceId = CommonUtil.getUuid();
                if (executedTimes >= maxExecuteTimes) {
                    command.setSuccess(STATE_EXECUTE_FAILURE);
                    command.setRemark("下发命令失败, traceId:" + traceId);
                    command.setExceptionCode(500);
                }
                failCommands.add(command);
            }
        }
    }

    private void submitCommand2IotPlatform() {
        for (RtTaskOnlineV1910 task : tasks) {
            Integer executedTimes = task.getExecutedTimes() == null ? 1 : task.getExecutedTimes() + 1;
            Integer maxExecuteTimes = task.getMaxExecuteTimes() == null ? 0 : task.getMaxExecuteTimes();
            task.setExecutedTimes(executedTimes);
            task.setMaxExecuteTimes(maxExecuteTimes);

            String parameters = task.getParameters();
            String paramJsonStr = task.getParamJsonStr();
            String appid = task.getWlwAppId();
            String cmdId = task.getSnProtocolCommand();
            String snMeter = task.getSnMeter();

            // 查询设备所属平台
            Optional<TRunMeterDocu> docuPlatformOp = docuRepo.findById(new TRunMeterDocuId(snMeter, EcasConstant.PROTOCOL_NO_PLATFORM));
            if (!docuPlatformOp.isPresent()) {
                if (executedTimes >= maxExecuteTimes) {
                    task.setSuccess(STATE_EXECUTE_FAILURE);
                    task.setRemark("Docu配置Platform不存在");
                    task.setExceptionCode(500);
                }
                failCommands.add(task);
                continue;
            }
            String platform = docuPlatformOp.get().getParamValue();

            // 查询命令配置
            TCfgAppsConfig appConfig = cacheService.getValue(appid);
            Optional<TCfgProtocolCmd> cmdOp = cmdRepo.findById(cmdId);
            if (!cmdOp.isPresent()) {
                if (executedTimes >= maxExecuteTimes) {
                    task.setSuccess(STATE_EXECUTE_FAILURE);
                    task.setRemark("命令不存在");
                    task.setExceptionCode(500);
                }
                failCommands.add(task);
                continue;
            }
            TCfgProtocolCmd protocolCmd = cmdOp.get();

            // CommandContext ctx = new DefaultCommandContext();

            // 处理不同平台的命令下发
            if (SystemConstant.PLATFORM_TELECOM.equals(platform)) {
                String serviceId = protocolCmd.getServiceId();
                String method = protocolCmd.getMethod();

                // 查询设备ID
                Optional<TRunMeterDocu> docuDeviceIdOp = docuRepo.findById(new TRunMeterDocuId(snMeter, EcasConstant.PROTOCOL_NO_DEVICE_ID));
                if (!cmdOp.isPresent()) {
                    if (executedTimes >= maxExecuteTimes) {
                        task.setSuccess(STATE_EXECUTE_FAILURE);
                        task.setRemark("Docu配置DeviceId不存在");
                        task.setExceptionCode(500);
                    }
                    failCommands.add(task);
                    continue;
                }
                String deviceId = docuDeviceIdOp.get().getParamValue();

                Future<HttpResponse> submit = executor.submit(() -> {
                    try {
                        String baseUrl = appConfig.getBaseUrl();
                        String secret = appConfig.getSecret();
                        LOG.info("Send command to telecom platform, request serviceId is {}, method is {}, parameters is {}.", serviceId, method, paramJsonStr);
                        return CreateDeviceCommand.submitDeviceCommand(baseUrl, appid, secret, serviceId, method, deviceId, JSON.parseObject(paramJsonStr));
                    } catch (Exception e1) {
                        e1.printStackTrace();
                    }
                    return null;
                });
                telecomFutureMap.put(task, submit);
            } else if (SystemConstant.PLATFORM_MOBILE.equals(platform)) {
                List<TCfgProtocolCmdParam> cmdParms = cmdParamRepo.findByCmdIdAndParamTypeOrderByParamNo(cmdId, "1");
                TRunMeter tRunMeter = meterRepo.findById(snMeter).get();
                String meterNo = tRunMeter.getMeterNo();

                // 查询设备唯一标识
                Optional<TRunMeterDocu> docuImeiOp = docuRepo.findById(new TRunMeterDocuId(snMeter, EcasConstant.PROTOCOL_NO_IMEI));
                if (!cmdOp.isPresent()) {
                    if (executedTimes >= maxExecuteTimes) {
                        task.setSuccess(STATE_EXECUTE_FAILURE);
                        task.setRemark("Docu配置IMEI不存在");
                        task.setExceptionCode(500);
                    }
                    failCommands.add(task);
                    continue;
                }
                String imei = docuImeiOp.get().getParamValue();
                // 异步提交任务
                Future<org.json.JSONObject> submit = executor.submit(() -> {
                    try {
                        // 后续如果出现了多个objId，可以考虑将这几个字段持久化到数据库表T_RUN_METER_DOCU当中。
                        Integer objId = properties.getObjId();
                        Integer objInstId = properties.getObjInstId();
                        Integer writeMode = properties.getWriteMode();
                        Date expiredTime = new Date(System.currentTimeMillis() + properties.getExpireOffset());
                        WriteOfflineV1910 writeOffline = new WriteOfflineV1910(imei, objId, objInstId, writeMode, expiredTime);

                        // 组装帧数据
                        // 681071565022180400010cF300010100000010121920012B16
                        StringBuffer frameValue = new StringBuffer();
                        frameValue.append(properties.getStartChar());
                        frameValue.append(properties.getMeterType());

                        String[] data = parameters.split(",");
                        // 拼接控制码
                        String controlCode = protocolCmd.getServiceId();
                        // 拼接数据类型
                        String dataType = protocolCmd.getMethod();
                        // 拼接数据长度
                        int dataTypeLen = dataType.length() / 2; // 数据类型长度
                        int serialLen = 1; // 序号长度
                        int length = dataTypeLen + serialLen;

                        for (int i = 0; i < data.length; i++) {
                            length += cmdParms.get(i).getByteLen();
                        }
                        frameValue.append(ParseUtil.encodeMeterNo(meterNo));
                        frameValue.append(ParseUtil.stringToBcd(controlCode));
                        frameValue.append(ParseUtil.intToHex(length, 2));
                        frameValue.append(ParseUtil.stringToBcd(dataType));
                        Integer seq = taskRepo.getSeq();
                        task.setSeq(seq);
                        // 拼接序号
                        frameValue.append(ParseUtil.intToHex(seq % 256, 2));
                        // 拼接参数值
                        processMobileInParam(cmdParms, frameValue, data);
                        frameValue.append(ParseUtil.calcChecksum(frameValue.toString()));
                        frameValue.append(properties.getEndChar());
                        org.json.JSONObject requestBody = new org.json.JSONObject();
                        JSONArray jsonArray = new JSONArray();
                        org.json.JSONObject dataObj = new org.json.JSONObject();
                        requestBody.put("data", jsonArray);
                        jsonArray.put(dataObj);
                        dataObj.put("res_id", properties.getReadResId());
                        dataObj.put("val", frameValue);

                        ExecuteOpe executeOpe = new ExecuteOpe(appid);
                        LOG.info("Send command to mobile platform, request object is: {}, requestBody: {}", writeOffline, requestBody);
                        org.json.JSONObject operation = executeOpe.operation(writeOffline, requestBody);
                        return operation;
                    } catch (MRException e) {
                        if (executedTimes >= maxExecuteTimes) {
                            task.setSuccess(STATE_EXECUTE_FAILURE);
                            task.setRemark(e.getMsg());
                            task.setExceptionCode(500);
                        }
                        LOG.error("命令下发失败, ", e);
                        failCommands.add(task);
                    } catch (Exception e) {
                        if (executedTimes >= maxExecuteTimes) {
                            task.setSuccess(STATE_EXECUTE_FAILURE);
                            task.setRemark(e.getMessage());
                            task.setExceptionCode(500);
                        }
                        LOG.error("命令下发失败, ", e);
                        failCommands.add(task);
                    }
                    return null;
                });
                mobileFutureMap.put(task, submit);
            }
        }
    }

    private void processMobileInParam(List<TCfgProtocolCmdParam> cmdParms, StringBuffer frameValue, String[] data) {
        if (null == cmdParms || data == null || cmdParms.size() != data.length) {
            throw new MRException(MRExceptionEnum.CommandParamLenInconsistent);
        }
        for (int i = 0; i < data.length; i++) {
            TCfgProtocolCmdParam paramDefine = cmdParms.get(i);
            String paramFrameType = paramDefine.getParamFrameType();
            if (StringUtils.isEmpty(paramFrameType)) {
                paramFrameType = "Default";
            }
            Integer byteLen = paramDefine.getByteLen();
            switch (paramFrameType) {
            case "BCD":
                frameValue.append(ParseUtil.stringToBcd(data[i]));
                break;
            case "HEX": // 数据传输超过一个字节时，都要低位在前高位在后
                frameValue.append(ParseUtil.stringToBcd(ParseUtil.intToHex(data[i], byteLen * 2)));
                break;
            case "IP": {
                String[] ip = data[i].split(".");
                for (int j = 0; j < ip.length; j++) {
                    int num = Integer.valueOf(ip[j]);
                    frameValue.append(ParseUtil.intToHex(num, byteLen * 2));
                }
            }
            default:
                frameValue.append(data[i]);
                break;
            }
        }
    }
}
