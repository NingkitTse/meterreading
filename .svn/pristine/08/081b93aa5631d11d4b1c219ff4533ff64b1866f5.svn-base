package com.wasion.meterreading.service.impl.telecom.ddc;

import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.wasion.meterreading.domain.dto.telecom.ServiceData;
import com.wasion.meterreading.domain.dto.telecom.TelecomContext;
import com.wasion.meterreading.domain.dto.telecom.impl.DailyReportData;
import com.wasion.meterreading.exception.MRException;
import com.wasion.meterreading.exception.MRExceptionEnum;
import com.wasion.meterreading.service.TelecomNotifyResolveServiceI;

@Service
public class DeviceDatasChangedResolver implements TelecomNotifyResolveServiceI {
	private final static Logger LOG = LoggerFactory.getLogger(DeviceDatasChangedResolver.class);

	@Autowired
	private DailyReportResolver dailyReportResolver;

	private SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd'T'HHmmss'Z'");

	@Override
	public void resolve(TelecomContext context) {
		JSONArray services = (JSONArray) context.getData();
		int len = services.size();
		for (int i = 0; i < len; ++i) {
			JSONObject object = services.getJSONObject(i);
			String serviceType = object.getString("serviceType");
			String serviceId = object.getString("serviceId");
			Date eventTime = null;
			try {
				eventTime = sdf.parse(object.getString("eventTime"));
			} catch (ParseException e) {
				LOG.error("Parse event time failed.", e);
				throw new MRException(MRExceptionEnum.CommunicationException);
			}
			String dateString = object.getJSONObject("data").toJSONString();

			ObjectMapper objectMapper = new ObjectMapper();

			LOG.info("Input data service type is {}.", serviceType);
			switch (serviceType) {
			case "DailyReport":
				ServiceData<DailyReportData> serviceData = new ServiceData<>();
				serviceData.setServiceId(serviceId);
				serviceData.setServiceType(serviceType);
				serviceData.setEventTime(eventTime);
				try {
					serviceData.setData(objectMapper.readValue(dateString, DailyReportData.class));
				} catch (IOException e) {
					LOG.error("Parse daily report data failed.", e);
					throw new MRException(MRExceptionEnum.CommunicationException);
				}
				dailyReportResolver.resolveServiceData(context, serviceData);
				break;
			default:
				break;
			}
		}
	}

}
