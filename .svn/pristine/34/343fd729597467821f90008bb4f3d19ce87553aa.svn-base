package com.wasion.meterreading.controller;

import java.io.UnsupportedEncodingException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.wasion.meterreading.service.impl.mobile.UploadDataServiceImpl;
import com.wasion.meterreading.util.OneNETUtil;

/**
 * 数据接收程序接口类
 *
 * Created by Roy on 2017/5/17.
 */
@Controller
@EnableAutoConfiguration
public class MobileReceiver {

	private static String token = "abcdefghijkmlnopqrstuvwxyz";// 用户自定义token和OneNet第三方平台配置里的token一致
	// private static String aeskey =
	// "whBx2ZwAU5LOHVimPj1MPx56QRe3OsGGWRe4dr17crV";//
	// aeskey和OneNet第三方平台配置里的token一致
	private static Logger logger = LoggerFactory.getLogger(MobileReceiver.class);

	private static final ExecutorService executorService = Executors.newCachedThreadPool();
	@Autowired
	private UploadDataServiceImpl mobileServiceI;

	/**
	 * 功能描述：第三方平台数据接收。
	 * <p>
	 * <ul>
	 * 注:
	 * <li>1.OneNet平台为了保证数据不丢失，有重发机制，如果重复数据对业务有影响，数据接收端需要对重复数据进行排除重复处理。</li>
	 * <li>2.OneNet每一次post数据请求后，等待客户端的响应都设有时限，在规定时限内没有收到响应会认为发送失败。
	 * 接收程序接收到数据时，尽量先缓存起来，再做业务逻辑处理。</li>
	 * </ul>
	 * 
	 * @param body
	 *            数据消息
	 * @return 任意字符串。OneNet平台接收到http 200的响应，才会认为数据推送成功，否则会重发。
	 */
	@RequestMapping(value = "/receive", method = RequestMethod.POST)
	@ResponseBody
	public String receive(@RequestBody String body)
			throws NoSuchPaddingException, InvalidKeyException, NoSuchAlgorithmException, IllegalBlockSizeException,
			BadPaddingException, InvalidAlgorithmParameterException {

		logger.info("data receive:  body String --- " + body);
		/************************************************
		 * 解析数据推送请求，非加密模式。 如果是明文模式使用以下代码
		 **************************************************/
		/************* 明文模式 start ****************/
		try {
			final OneNETUtil.BodyObj obj = OneNETUtil.resolveBody(body, false);

			logger.info("data receive:  body Object --- " + obj);
			if (obj != null) {
				boolean dataRight = OneNETUtil.checkSignature(obj, token);
				if (dataRight) {
					logger.info("data receive: content" + obj.toString());
				} else {
					logger.info("data receive: signature error");
				}
				// 异步执行任务，不要让平台等太久
				executorService.submit(() -> {
					Object value = obj.getMsg();
					if (value instanceof JSONObject) {
						mobileServiceI.parseData((JSONObject) value);
					} else {
						mobileServiceI.parseData((JSONArray) value);
					}
				});
			} else {
				logger.info("data receive: body empty error");
			}
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		/************* 明文模式 end ****************/

		/********************************************************
		 * 解析数据推送请求，加密模式
		 *
		 * 如果是加密模式使用以下代码
		 ********************************************************/
		/************* 加密模式 start ****************/
		// Util.BodyObj obj1 = Util.resolveBody(body, true);
		// logger.info("data receive: body Object--- " +obj1);
		// if (obj1 != null){
		// boolean dataRight1 = Util.checkSignature(obj1, token);
		// if (dataRight1){
		// String msg = Util.decryptMsg(obj1, aeskey);
		// logger.info("data receive: content" + msg);
		// }else {
		// logger.info("data receive: signature error " );
		// }
		// }else {
		// logger.info("data receive: body empty error" );
		// }
		/************* 加密模式 end ****************/
		return "ok";
	}

	/**
	 * 功能说明： URL&Token验证接口。如果验证成功返回msg的值，否则返回其他值。
	 * 
	 * @param msg
	 *            验证消息
	 * @param nonce
	 *            随机串
	 * @param signature
	 *            签名
	 * @return msg值
	 */
	@RequestMapping(value = "/receive", method = RequestMethod.GET)
	@ResponseBody
	public String check(@RequestParam(value = "msg") String msg, @RequestParam(value = "nonce") String nonce,
			@RequestParam(value = "signature") String signature) throws UnsupportedEncodingException {
		logger.info("url&token check: msg:{} nonce{} signature:{}", msg, nonce, signature);
		if (OneNETUtil.checkToken(msg, nonce, signature, token)) {
			return msg;
		} else {
			return "error";
		}

	}

}
