package com.wasion.meterreading.task.process.telecom;

import org.apache.http.HttpResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Component;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.wasion.meterreading.entity.RtTaskOnlineV1910;
import com.wasion.meterreading.entity.TCfgAppsConfig;
import com.wasion.meterreading.entity.TCfgProtocolCmd;
import com.wasion.meterreading.task.context.CommandContext;
import com.wasion.meterreading.task.process.CommandSender;

import telecom.sdk.service.commandDelivery.CreateDeviceCommand;
import telecom.sdk.utils.HttpsUtil;

@Component
public class TelecomCmdSender implements CommandSender {

    private static final Logger LOG = LoggerFactory.getLogger(TelecomCmdSender.class);

    @Override
    public void sendCommand(CommandContext context) {
        String paramJsonStr = context.getParamJsonStr();
        TCfgAppsConfig appConfig = context.getAppConfig();
        String appid = appConfig.getAppid();
        RtTaskOnlineV1910 task = context.getTask();
        String traceId = task.getTraceId();

        TCfgProtocolCmd protocolCmd = context.getProtocolCmd();
        String serviceId = protocolCmd.getServiceId();
        String method = protocolCmd.getMethod();
        String deviceId = context.getDeviceId();
        HttpResponse response = null;

        try {
            String baseUrl = appConfig.getBaseUrl();
            String secret = appConfig.getSecret();
            LOG.info("Send command to telecom platform, request serviceId is {}, method is {}, parameters is {}.", serviceId, method, paramJsonStr);
            response = CreateDeviceCommand.submitDeviceCommand(baseUrl, appid, secret, serviceId, method, deviceId, JSON.parseObject(paramJsonStr));

            if (null == response) {
                LOG.error("Publish command to platform failed");
                context.fail(task, traceId, "未获取到平台响应");
                return;
            }
            final int statusCode = response.getStatusLine().getStatusCode();
            if (statusCode == HttpStatus.CREATED.value()) {
                String responseBody = HttpsUtil.getInstance().getHttpResponseBody(response);
                JSONObject rspObj = JSON.parseObject(responseBody);
                String status = rspObj.getString("status");
                String commandId = rspObj.getString("commandId");
                context.success(task, status, commandId);
            } else {
                context.fail(task, traceId, "平台未返回命令创建成功");
            }
        } catch (Exception e1) {
            LOG.error("traceId: {}", traceId, e1);
            context.fail(task, traceId, "未知异常，请跟踪日志.");
        } finally {
            LOG.info("命令下发完成, 请求: {}, 结果: {}.", response);
        }
    }

}
