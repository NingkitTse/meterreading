package com.wasion.meterreading.service.impl.mobile.ddc;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.stereotype.Service;

import com.wasion.meterreading.domain.TMeterDevice;
import com.wasion.meterreading.domain.UploadData;
import com.wasion.meterreading.domain.dto.ResolveContext;
import com.wasion.meterreading.domain.dto.ResolveContext.DataMapKey;
import com.wasion.meterreading.domain.dto.mobile.MobileContext;
import com.wasion.meterreading.domain.dto.mobile.MobileContext.UploadDataConstant;
import com.wasion.meterreading.domain.view.VMeterDevice;
import com.wasion.meterreading.orm.jpa.TMobileMeterRepository;
import com.wasion.meterreading.orm.jpa.VMobileMeterRepository;
import com.wasion.meterreading.service.NotifyResolveServiceI;
import com.wasion.meterreading.service.impl.mobile.MeterServiceImpl;
import com.wasion.meterreading.util.CommonUtil;
import com.wasion.meterreading.util.ContextProvider;
import com.wasion.meterreading.util.ParseUtil;

@Service
public class DeviceDataChangedResolver implements NotifyResolveServiceI {
	private static final Logger LOG = LoggerFactory.getLogger(DeviceDataChangedResolver.class);
	private static final String DATA_REPORT = "F100";
	private static final String EVENT_REPORT = "F400";
	@Autowired
	private VMobileMeterRepository vMeterRepository;
	@Autowired
	private TMobileMeterRepository tMeterRepository;

	private String apiKey;

	public String getApiKey() {
		return apiKey;
	}

	public void setApiKey(String apiKey) {
		this.apiKey = apiKey;
	}

	@Override
	public void resolve(ResolveContext mobileContext) {
		String deviceId = mobileContext.getDeviceId();
		VMeterDevice meterDevice = vMeterRepository.findByDeviceId(deviceId);

		if (null == meterDevice) { // 如果本地库没有该设备就去IOT平台查询
			MeterServiceImpl bean = ContextProvider.getBean(MeterServiceImpl.class);
			meterDevice = bean.queryVMobileMeterFromIot(deviceId);
			if (null == meterDevice) {
				LOG.error("Meter device is not exist from mobile iot platform.");
				return;
			}
		}
		String snMeter = meterDevice.getSnMeter();
		String snDevice = meterDevice.getSnDevice();
		mobileContext.setSnMeter(snMeter);
		mobileContext.setSnDevice(snDevice);

		parseDataReportBaseData((MobileContext) mobileContext);
		parseDataReportServiceData((MobileContext) mobileContext);

		String meterNo = mobileContext.getMeterNo();
		if (!StringUtils.isEmpty(meterNo)) {
			TMeterDevice device = TMeterDevice.of(deviceId, meterDevice.getImei(), meterDevice.getImsi());
			device.setMeterNo(meterNo);
			tMeterRepository.save(device);
		}
	}

	private void parseDataReportBaseData(MobileContext mobileContext) {
		String frameValue = (String) mobileContext.get(DataMapKey.FRAME_VALUE_KEY);
		int index = 0;
		int startChar = ParseUtil.hexToInt(frameValue.substring(index, index + 2));
		index += 2;
		int meterType = ParseUtil.hexToInt(frameValue.substring(index, index + 2));
		index += 2;
		String addressDomain = ParseUtil.bcdToString(frameValue.substring(index, index + 14));
		index += 14;
		String controlCode = frameValue.substring(index, index + 2);
		index += 2;

		int dataLen = ParseUtil.hexToInt(frameValue.substring(index, index + 2));
		index += 2;
		String dataSign = ParseUtil.bcdToString(frameValue.substring(index, index + 4));
		index += 4;
		String dataStr = frameValue.substring(index, dataLen * 2 + index);
		mobileContext.put(UploadDataConstant.START_CHAR_KEY, startChar);
		mobileContext.put(UploadDataConstant.METER_TYPE_KEY, meterType);
		mobileContext.put(UploadDataConstant.METER_NO_KEY, CommonUtil.specifyMeterNo(addressDomain));
		mobileContext.put(UploadDataConstant.CONTROL_CODE_KEY, controlCode);
		mobileContext.put("dataLen", dataLen);
		mobileContext.put(UploadDataConstant.DATA_SIGN_KEY, dataSign);
		mobileContext.put(UploadDataConstant.DATA_STR_KEY, dataStr);
	}

	private static List<UploadData> parseDataReportServiceData(MobileContext mobileContext) {
		List<UploadData> retList = new ArrayList<>();

		ApplicationContext context = ContextProvider.getContext();
		String dataSign = (String) mobileContext.get(UploadDataConstant.DATA_SIGN_KEY);
		String dataStr = (String) mobileContext.get(UploadDataConstant.DATA_STR_KEY);

		switch (dataSign.toUpperCase()) {
		case DATA_REPORT: // 数据上报
			LOG.debug("Service data type is data report.");
			FreezeDataResolver bean = context.getBean(FreezeDataResolver.class);
			retList.addAll(bean.resolveDataList(mobileContext, dataStr));
			break;
		case EVENT_REPORT: // 事件上报
			LOG.debug("Service data type is event report.");
			EventReportResolver bean2 = context.getBean(EventReportResolver.class);
			retList.add(bean2.resolveData(mobileContext, dataStr));
			break;
		default:
			break;
		}
		return retList;
	}
}
