package com.wasion.meterreading.service.impl.mobile;

import java.util.Date;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wasion.meterreading.domain.dto.ResolveContext.DataMapKey;
import com.wasion.meterreading.domain.dto.mobile.MobileContext;
import com.wasion.meterreading.domain.dto.mobile.MobileContext.UploadDataConstant;
import com.wasion.meterreading.service.NotifyResolveServiceI;
import com.wasion.meterreading.service.UploadDataServiceI;
import com.wasion.meterreading.service.impl.cache.ResolverConfigCacheService;

/**
 * 同步移动水表数据服务类
 * 
 * @author w24882
 * @date 2019年10月8日
 */
@ConfigurationProperties(prefix = "10086.iot")
@Service(value = "mobileUploadDataServiceImpl")
public class UploadDataServiceImpl implements UploadDataServiceI {

	private static final Logger LOG = LoggerFactory.getLogger(UploadDataServiceImpl.class);
	private static final ExecutorService service = Executors.newFixedThreadPool(10);
	@Autowired
	private ResolverConfigCacheService resolverConfigCache;

	@Transactional
	@Override
	public void parseData(Object value) {
		try {
			if (value instanceof JSONObject) {
				this.parseData((JSONObject) value);
			} else {
				this.parseDataArray((JSONArray) value);
			}
		} catch (Exception e) {
			LOG.error("Parse data failed,", e);
		}
	}

	/**
	 * 解析数据上报数据：<br>
	 * 样例数据： "msg": [{ "type": 1, "dev_id": 560581487, "ds_id": "datastream_id",
	 * "at": 1466133706841, "value":
	 * "681040913338010400813D00F101C4090000FFFFFFFF0000231019000000000000000000000000000000000000000000000000000000006103ADFFFCFF33FFFFFFFFFFFFFFFF0000B416"
	 * }, { "type": 1, "dev_id": 560581487, "ds_id": "datastream_id", "at":
	 * 1466133706841, "value":
	 * "681040913338010400813D00F101C4090000FFFFFFFF0000231019000000000000000000000000000000000000000000000000000000006103ADFFFCFF33FFFFFFFFFFFFFFFF0000B416"
	 * }]
	 * 
	 * @param arr
	 * @author w24882 xieningjie
	 * @date 2019年11月19日
	 */
	private void parseDataArray(JSONArray arr) {
		int len = arr.length();
		CountDownLatch countDownLatch = new CountDownLatch(len);
		for (int i = 0; i < len; ++i) {
			int index = i;
			service.submit(() -> {
				try {
					parseData(arr.getJSONObject(index));
				} catch (JSONException e) {
					e.printStackTrace();
				} finally {
					countDownLatch.countDown();
				}
			});
		}
		try {
			countDownLatch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 解析报文Msg消息体 <br>
	 * 样例数据： "msg": { "type": 1, "dev_id": 560581487, "ds_id": "datastream_id",
	 * "at": 1466133706841, "value":
	 * "681040913338010400813D00F101C4090000FFFFFFFF0000231019000000000000000000000000000000000000000000000000000000006103ADFFFCFF33FFFFFFFFFFFFFFFF0000B416"
	 * }
	 * 
	 * @param data
	 * @author w24882 xieningjie
	 * @date 2019年11月19日
	 */
	private void parseData(JSONObject data) {
		try {
			MobileContext mobileContext = new MobileContext();
			parseMsgBaseData(data, mobileContext);
			String notifyType = mobileContext.getNotifyType();

			// 获取解析器配置
			NotifyResolveServiceI resolver = resolverConfigCache.getResolver(notifyType, NotifyResolveServiceI.class);
			resolver.resolve(mobileContext);
		} catch (JSONException e) {
			e.printStackTrace();
		}
	}

	private void parseMsgBaseData(JSONObject data, MobileContext mobileContext) throws JSONException {
		final String deviceId = data.getInt("dev_id") + "";
		mobileContext.put("dsId", data.getString("ds_id"));
		mobileContext.put(UploadDataConstant.REGISTER_DATE_KEY, new Date(data.getLong("at")));
		String frameValue = data.getString("value");
		mobileContext.setDeviceId(deviceId);
		mobileContext.setNotifyType(data.getInt("type") + "");
		mobileContext.put(DataMapKey.FRAME_VALUE_KEY, frameValue);
	}

}
