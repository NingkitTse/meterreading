package com.wasion.meterreading.service.impl.telecom.cr;

import java.util.List;
import java.util.Set;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.alibaba.fastjson.JSONObject;
import com.wasion.meterreading.domain.dto.ResolveContext;
import com.wasion.meterreading.entity.RtTaskOnlineV1910;
import com.wasion.meterreading.entity.TCfgProtocolCmdParam;
import com.wasion.meterreading.orm.jpa.RtTaskOnlineV1910Repository;
import com.wasion.meterreading.orm.jpa.TCfgProtocolCmdParamRepository;
import com.wasion.meterreading.service.NotifyResolveServiceI;

/**
 * 电信命令响应解析类
 * 
 * @author w24882 xieningjie
 * @date 2019年12月4日
 */
@Service
public class TeleCommandRspResolver implements NotifyResolveServiceI {

	private static final Logger LOG = LoggerFactory.getLogger(TeleCommandRspResolver.class);
	@Autowired
	private RtTaskOnlineV1910Repository taskRepo;
	@Autowired
	private TCfgProtocolCmdParamRepository cmdParamRepo;

	/**
	 * ParamType 出参标识
	 */
	private final static String PARAM_TYPE_OUT_PARAM = "0";

	/**
	 * 样例数据： { "deviceId": "d2187a76-1a6c-404f-b1e7-2fe7a60fa984", "commandId":
	 * "f67384a07a5b4581a87b9c93f29824a5", "result": { "resultCode":
	 * "SUCCESSFUL", "resultDetail": { "result": { "result": 1,
	 * "getdayfreezingstarttimedata": [ "1912040000", 100, "FFFFFFFFFF",
	 * 4294967295, "FFFFFFFFFF", 4294967295, "FFFFFFFFFF", 4294967295,
	 * "FFFFFFFFFF", 4294967295, "FFFFFFFFFF", 4294967295, "FFFFFFFFFF",
	 * 4294967295 ], "getdayfreezingnumber": 7, "meterEleno": "00113037027741" }
	 * } } }
	 */
	@Override
	public void resolve(ResolveContext context) {
		JSONObject requestBody = (JSONObject) context.getData();
		String wlwCommandId = requestBody.getString("commandId");
		// String deviceId = requestBody.getString("deviceId");
		JSONObject result = requestBody.getJSONObject("result");
		String resultCode = result.getString("resultCode");
		// 更新状态
		RtTaskOnlineV1910 task = taskRepo.findByCommandId(wlwCommandId);
		task.setWlwCmdStatus(resultCode);
		taskRepo.save(task);

		JSONObject resultDetail = result.getJSONObject("resultDetail");
		if (null == resultDetail) {
			LOG.info("No result detail.", wlwCommandId);
			return;
		}
		JSONObject realResult = resultDetail.getJSONObject("result");
		if (null == realResult) {
			LOG.info("No result detail result.", wlwCommandId);
			return;
		}

		List<TCfgProtocolCmdParam> params = cmdParamRepo.findByCmdIdOrderByParamNo(task.getSnProtocolCommand());
		StringBuffer returnData = new StringBuffer();
		LOG.info("Received command<{}>'s process result.", wlwCommandId);

		Set<String> keySet = realResult.keySet();
		int index = 0;
		for (TCfgProtocolCmdParam param : params) {
			String paramKey = param.getParamKey();

			String paramType = param.getParamType();
			LOG.debug("Param[{}]'s key is {}, type is {}", index, param.getParamKey(), paramType);
			if (!PARAM_TYPE_OUT_PARAM.equals(paramType)) {
				continue;
			}
			if (!keySet.contains(paramKey)) {
				continue;
			}
			returnData.append(realResult.getString(paramKey).replace(",", "|") + ","); // 与老采集回填参数的风格保持一致
			index++;
		}

		int len = returnData.length();
		if (len > 0) {
			task.setReturnData(returnData.substring(0, len - 1));
		}
		taskRepo.save(task);
	}

}
